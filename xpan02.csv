/*
---------------------------------------
# ✅ xpan002
# ✅ Pandas criado: 2021/10/27
# ✅ Objetivo:sql server - PANDAS Lib
---------------------------------------*/
CREATE proc [dbo].[xpan002]
AS
/*

-------------------------------
# TUTORIAL - X1PAN02 2021/07/08
-------------------------------

import pandas as pd
import numpy as np

#Constructing DataFrame from a list
d = {'col1': [1,2,3,4,5,6], 'col2': [13,14,15,16,17,20]}

 df = pd.DataFrame(data=d)
 print(df)
   col1  col2
0     1    13
1     2    14
2     3    15
3     4    16
4     5    17
5     6    20

#Constructing DataFrame from numpy ndarray:
df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),columns=['a', 'b', 'c'])

print(df2)
   a  b  c
0  1  2  3
1  4  5  6
2  7  8  9

print(df2.dtypes)
a    int32
b    int32
c    int32
dtype: object

#To enforce a single dtype:
df = pd.DataFrame(data=d, dtype=np.float)
print(df.dtypes)
col1    float64
col2    float64
dtype: object

df2.head()
a	b	c
0	1	2	3
1	4	5	6
2	7	8	9

df2.shape # retorna uma tupla linhas x colunas
(3, 3)

#Resumo estatístico do DataFrame
df2.describe()
a	b	c
count	3.0	3.0	3.0
mean	4.0	5.0	6.0
std	3.0	3.0	3.0
min	1.0	2.0	3.0
25%	2.5	3.5	4.5
50%	4.0	5.0	6.0
75%	5.5	6.5	7.5
max	7.0	8.0	9.0

df2.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 3 entries, 0 to 2
Data columns (total 3 columns):

 #   Column  Non-Null Count  Dtype
---  ------  --------------  -----
 0   a       3 non-null      int32
 1   b       3 non-null      int32
 2   c       3 non-null      int32
dtypes: int32(3)
memory usage: 164.0 bytes

df.tail()
col1	col2
1	2.0	14.0
2	3.0	15.0
3	4.0	16.0
4	5.0	17.0
5	6.0	20.0

df2.loc[::-1] # inverte os indices
a	b	c
2	7	8	9
1	4	5	6
0	1	2	3
df2.loc[::1] # restaura os indices
a	b	c
0	1	2	3
1	4	5	6
2	7	8	9
*/